{"version":3,"sources":["topic_selector_comp.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","value","onClick","class","List","items","onItemClick","map","item","i","key","TopicSelect","props","state","inputValue","topics","nextState","setState","removeTopic","onChange","e","target","bind","t","this","index","indexOf","splice","type","buttonStyle","React","Component","router","require","urlString","window","location","href","splitString","split","console","log","App","triggerShowTopicSelector","showSelector","triggerHideTopicSelector","apiResponse","loaded","fetch","then","res","text","catch","err","getToken","get","req","logout","redirect","apiKey","appId","token","avatar","AfterUsername","action","username","subtitle","timestamp","onClickUser","feedGroup","FooterItem","options","reactions","recent","notify","Activity","Footer","style","padding","activity","onAddReaction","activityId","id","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cf01b4d.chunk.js","sourcesContent":["import React from 'react';\nimport { StreamApp, Button, FlatFeed, LikeButton, Activity, CommentList, CommentField, StatusUpdateForm } from 'react-activity-feed'; \nimport 'react-activity-feed/dist/index.css';\nimport './index.css';\nimport './topic_selector_comp.css'\n\nconst ListItem = ({ value, onClick }) => (\n    <li class=\"item\" onClick={onClick}>{value}</li>\n  );\n  \n  const List = ({ items, onItemClick }) => (\n    <ul>\n      {\n        items.map((item, i) => <ListItem key={i} value={item} onClick={onItemClick(item)} />)\n      }\n    </ul>\n  );\n  \n  class TopicSelect extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        inputValue: '',\n        topics: []\n      };\n      this.removeTopic = this.removeTopic.bind(this);\n    }\n  \n    onClick = () => {\n      const { inputValue, topics } = this.state;\n      if (inputValue) {\n        const nextState = [...topics, inputValue];\n        this.setState({ topics: nextState, inputValue: '' });\n      }\n    }\n\n    removeTopic(t) {\n      var topics = [...this.state.topics]; // make a separate copy of the array\n      var index = topics.indexOf(t);\n      if (index !== -1) {\n        topics.splice(index, 1);\n        this.setState({ topics: topics, inputValue: '' });\n      }\n    }\n\n    onItemClick = item => () => {\n      this.removeTopic(item);\n    }\n  \n    onChange = (e) => this.setState({ inputValue: e.target.value });\n\n    render() {\n      const { topics, inputValue } = this.state;\n      return (\n        <div class=\"comp_div\">\n          <div class=\"inner_div\">\n            <input class=\"inner_div\" type=\"text\" value={inputValue} onChange={this.onChange} />\n            <Button buttonStyle=\"primary\" onClick={this.onClick}>Add</Button>\n          </div>\n\n          <div class=\"list_div\">\n            <List items={topics} onItemClick={this.onItemClick} />\n          </div>\n\n        </div>\n      );\n    }\n  }\n\nexport default TopicSelect;","import React from 'react';\nimport { StreamApp, UserBar, Button, FlatFeed, LikeButton, Activity, CommentList, CommentField, StatusUpdateForm,\nRepostButton } from 'react-activity-feed';\nimport 'react-activity-feed/dist/index.css';\nimport TopicSelect from './topic_selector_comp.js';\nimport'./topic_selector_comp.css';\n\nvar router = require('./index.js');\n\nvar urlString = window.location.href;\nvar splitString = urlString.split('/');\nurlString = splitString[0] + \"/\" + splitString[1] + \"/\" + splitString[2] + \"/getToken\";\nconsole.log(urlString);\n//urlString = \"http://localhost:3001/getToken\";\n// if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n//     // dev code\n//     urlString = \"http://localhost:3001/getToken\";\n// } else {\n//     // production code\n//     urlString = \"https://hottopix.herokuapp.com/getToken\";\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSelector: false,\n      apiResponse: \"asdf\",\n      loaded: false\n    };\n  }\n\n  getToken () {\n    console.log(\"called getToken\");\n    fetch(urlString)\n    .then(res => res.text())\n    .then(res => {\n      this.setState({\n        apiResponse: res,\n        loaded: true\n      });\n      //console.log(res);\n    })\n    .catch(err => {console.log(err);}\n    );\n  }\n\n  triggerShowTopicSelector = () => {\n    this.setState({\n      ...this.state,\n      showSelector: true\n    })\n  }\n\n  triggerHideTopicSelector = () => {\n    this.setState({\n      ...this.state,\n      showSelector: false\n    })\n  }\n\n  componentWillMount() {\n      this.getToken();\n      console.log(\"calling getToken\");\n  }\n\n  signout() {\n    router.\n    router.get('/logout', function(req, res) {\n      req.logout();\n      res.redirect('/');\n    });\n  }\n\n  render () {\n    //console.log(process.env['REACT_APP_API']);\n    //console.log(process.env['REACT_APP_ID']);\n    //console.log(this.state.apiResponse);\n    if(!this.state.loaded) {\n      return null;\n    }\n    return (\n      <div>\n\n      <StreamApp\n        apiKey=\"sjc92jugd7js\"\n        appId=\"62811\"\n        token={this.state.apiResponse}\n      >\n\n        <UserBar\n          avatar=\"test_profile_pic.png\"\n\n          AfterUsername={<div><form action=\"/logout\"><Button type=\"submit\" buttonStyle=\"info\">Sign Out</Button></form></div>}\n\n          username=\"Dan the Fireman\"\n          subtitle=\"extinguising fires since 1999\"\n          timestamp=\"2018-09-19T07:44:11+00:00\"\n          onClickUser={() => console.log('clicked the user')}\n        />\n\n        <br></br>\n\n        <StatusUpdateForm\n          feedGroup = \"Timeline\"\n          FooterItem={\n            <div>\n              <div>\n                { this.state.showSelector && <Button buttonStyle=\"info\" onClick={this.triggerHideTopicSelector}>Cancel</Button> }\n                { this.state.showSelector ? <Button buttonStyle=\"primary\" onClick={this.triggerHideTopicSelector}>Done</Button> : <Button\n                  buttonStyle=\"primary\" onClick={this.triggerShowTopicSelector}>Add Topics</Button> }\n              </div>\n              { this.state.showSelector && <TopicSelect/> }\n            </div>\n          }\n        />\n\n        <FlatFeed\n          feedGroup = \"Timeline\"\n          options={ {reactions: { recent: true } } }\n          notify\n          Activity={(props) =>\n            <Activity {...props}\n              Footer={() => (\n                <div style={ {padding: '8px 16px'} }>\n                  <LikeButton {...props} />\n                  <RepostButton {...props}/>\n                  <CommentField\n                    activity={props.activity}\n                    onAddReaction={props.onAddReaction} />\n                  <CommentList activityId={props.activity.id} />\n                </div>\n              )}\n            />\n          }\n        />\n\n\n      </StreamApp>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}