{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["router","require","divStyle","display","width","justifyContent","urlString","window","location","href","splitString","split","console","log","ListItem","value","onClick","class","align","List","items","onItemClick","map","item","i","key","FinalListItem","FinalList","App","props","triggerShowTopicSelector","setState","state","showSelector","showFinalTopicsList","triggerHideTopicSelector","setFinalTopicList","topics","length","inputValue","nextState","removeTopic","onChange","e","target","postTopics","apiResponse","loaded","bind","fetch","then","res","text","catch","err","this","getToken","get","req","logout","redirect","t","index","indexOf","splice","apiKey","appId","token","feedGroup","FooterItem","style","buttonStyle","type","options","reactions","recent","notify","Activity","Footer","padding","activity","onAddReaction","activityId","id","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24373868.chunk.js","sourcesContent":["import React from \"react\";\nimport {StreamApp, UserBar, Button, FlatFeed, LikeButton, Activity, CommentList, CommentField, StatusUpdateForm, RepostButton} from \"react-activity-feed\";\nimport \"react-activity-feed/dist/index.css\";\n//import TopicSelect from './topic_selector_comp.js';\nimport \"./topic_selector_comp.css\";\nimport \"./index.css\";\n\nvar router = require(\"./index.js\");\n\nvar divStyle = {\n  display: \"inline-flex\",\n  width: \"90%\",\n  justifyContent: \"flex-end\"\n};\n\n//load user model\n//const TopicList = require('../models/TopicList.js');\n\n//const User = require('../models/User.js');\n\nvar urlString = window.location.href;\nvar splitString = urlString.split(\"/\");\nurlString =\n  splitString[0] + \"/\" + splitString[1] + \"/\" + splitString[2] + \"/getToken\";\nconsole.log(urlString);\n//urlString = \"http://localhost:3001/getToken\";\n// if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n//     // dev code\n//     urlString = \"http://localhost:3001/getToken\";\n// } else {\n//     // production code\n//     urlString = \"https://hottopix.herokuapp.com/getToken\";\n// }\n\nconst ListItem = ({value, onClick}) => (\n  <li class=\"item\" align=\"center\" onClick={onClick}>\n    {value}\n  </li>\n);\n\nconst List = ({items, onItemClick}) => (\n  <ul align=\"center\">\n    {items.map((item, i) => (\n      <ListItem key={i} value={item} onClick={onItemClick(item)} />\n    ))}\n  </ul>\n);\n\nconst FinalListItem = ({value}) => <li class=\"final_item\">{value}</li>;\n\nconst FinalList = ({items}) => (\n  <ul class=\"final_list\">\n    {items.map((item, i) => (\n      <FinalListItem key={i} value={item} />\n    ))}\n  </ul>\n);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\",\n      topics: [],\n      showSelector: false,\n      postTopics: [],\n      showFinalTopicsList: false,\n      apiResponse: \"\",\n      loaded: false\n    };\n    this.removeTopic = this.removeTopic.bind(this);\n  }\n\n  getToken() {\n    console.log(\"called getToken\");\n    fetch(urlString)\n      .then(res => res.text())\n      .then(res => {\n        this.setState({\n          apiResponse: res,\n          loaded: true\n        });\n        //console.log(res);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  triggerShowTopicSelector = () => {\n    this.setState({\n      ...this.state,\n      showSelector: true,\n      showFinalTopicsList: false\n    });\n  };\n\n  triggerHideTopicSelector = () => {\n    this.setState({\n      ...this.state,\n      showSelector: false\n    });\n  };\n\n  setFinalTopicList = () => {\n    if (this.state.topics.length > 0) {\n      this.setState({\n        ...this.state,\n        showFinalTopicsList: true,\n        showSelector: false\n      });\n    } else {\n      this.setState({\n        ...this.state,\n        showSelector: false\n      });\n    }\n  };\n\n  componentWillMount() {\n    this.getToken();\n  }\n\n  signout() {\n    router.router.get(\"/logout\", function (req, res) {\n      req.logout();\n      res.redirect(\"/\");\n    });\n  }\n\n  removeTopic(t) {\n    var topics = [...this.state.topics]; // make a separate copy of the array\n    var index = topics.indexOf(t);\n    if (index !== -1) {\n      topics.splice(index, 1);\n      this.setState({topics: topics, inputValue: \"\"});\n    }\n  }\n\n  onClick = () => {\n    const {inputValue, topics} = this.state;\n    if (inputValue) {\n      const nextState = [...topics, inputValue];\n      this.setState({topics: nextState, inputValue: \"\"});\n    }\n  };\n\n  onItemClick = item => () => {\n    this.removeTopic(item);\n  };\n\n  onChange = e => this.setState({inputValue: e.target.value});\n\n  render() {\n    if (!this.state.loaded) {\n      return null;\n    }\n\n    const {topics, inputValue} = this.state;\n\n    return (\n      <div>\n        <br></br>\n\n        <StreamApp\n          apiKey=\"sjc92jugd7js\"\n          appId=\"62811\"\n          token={this.state.apiResponse}\n        >\n          <StatusUpdateForm\n            feedGroup=\"Timeline\"\n            FooterItem={\n              <div style={divStyle} align=\"left\">\n                {!this.state.showSelector && (\n                  <Button\n                    buttonStyle=\"primary\"\n                    onClick={this.triggerShowTopicSelector}\n                  >\n                    Add Topics\n                  </Button>\n                )}\n\n                {this.state.showSelector && (\n                  <div class=\"comp_div\">\n                    <div class=\"inner_div\">\n                      <input\n                        class=\"inner_div\"\n                        type=\"text\"\n                        value={inputValue}\n                        onChange={this.onChange}\n                      />\n                      <Button buttonStyle=\"primary\" onClick={this.onClick}>\n                        Add\n                      </Button>\n                      <Button\n                        buttonStyle=\"info\"\n                        onClick={this.triggerHideTopicSelector}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        buttonStyle=\"primary\"\n                        onClick={this.setFinalTopicList}\n                      >\n                        Done\n                      </Button>\n                    </div>\n\n                    <div class=\"list_div\">\n                      <List items={topics} onItemClick={this.onItemClick} />\n                    </div>\n                  </div>\n                )}\n\n                {this.state.showFinalTopicsList && (\n                  <div class=\"final_comp_div\" align=\"center\">\n                    <div class=\"list_div\" align=\"center\">\n                      <FinalList items={topics} />\n                    </div>\n                  </div>\n                )}\n              </div>\n            }\n          />\n\n          <FlatFeed\n            feedGroup=\"Timeline\"\n            options={{reactions: {recent: true}}}\n            notify\n            Activity={props => (\n              <Activity\n                {...props}\n                Footer={() => (\n                  <div style={{padding: \"8px 16px\"}}>\n                    <LikeButton {...props} />\n                    <RepostButton {...props} />\n                    <CommentField\n                      activity={props.activity}\n                      onAddReaction={props.onAddReaction}\n                    />\n                    <CommentList activityId={props.activity.id} />\n                  </div>\n                )}\n              />\n            )}\n          />\n        </StreamApp>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}